 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/interest_places", type: :request do
  fixtures :postals
  fixtures :settlements
  fixtures :users

  before(:each) do 
    user = User.create!(email: 'test@example.com', username: 'test', password: 'f4k3p455w0rd')
    user.confirm
    login_as(user, scope: :user)
  end

  # InterestPlace. As you add validations to InterestPlace, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {postal_id: postals(:three).id, settlement_id: settlements(:three).id, user_id: users(:one).id}
  }

  let(:invalid_attributes) {
    {postal_id: '', settlement_id: '', user_id: users(:one).id}
  }

  describe "GET /index" do
    it "renders a successful response" do
      InterestPlace.create! valid_attributes
      get interest_places_url
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_interest_place_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      interest_place = InterestPlace.create! valid_attributes
      get edit_interest_place_url(interest_place)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new InterestPlace" do
        expect {
          post interest_places_url, params: { interest_place: valid_attributes }
        }.to change(InterestPlace, :count).by(1)
      end

      it "redirects to the created interest_place" do
        post interest_places_url, params: { interest_place: valid_attributes }
        expect(response).to redirect_to(interest_places_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new InterestPlace" do
        expect {
          post interest_places_url, params: { interest_place: invalid_attributes }
        }.to change(InterestPlace, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post interest_places_url, params: { interest_place: invalid_attributes }
        expect(response).to be_unprocessable
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {postal_id: postals(:four).id, settlement_id:settlements(:four).id, user_id: users(:one).id}
      }

      it "updates the requested interest_place" do
        interest_place = InterestPlace.create! valid_attributes
        patch interest_place_url(interest_place), params: { interest_place: new_attributes }
        interest_place.reload
      end

      it "redirects to the interest_place" do
        interest_place = InterestPlace.create! valid_attributes
        patch interest_place_url(interest_place), params: { interest_place: new_attributes }
        interest_place.reload
        expect(response).to redirect_to(interest_places_url)
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        interest_place = InterestPlace.create! valid_attributes
        patch interest_place_url(interest_place), params: { interest_place: invalid_attributes }
        expect(response).to be_unprocessable
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested interest_place" do
      interest_place = InterestPlace.create! valid_attributes
      expect {
        delete interest_place_url(interest_place)
      }.to change(InterestPlace, :count).by(-1)
    end

    it "redirects to the interest_places list" do
      interest_place = InterestPlace.create! valid_attributes
      delete interest_place_url(interest_place)
      expect(response).to redirect_to(interest_places_url)
    end
  end
end
